var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
// Internal Imports
import { Component } from "../component";
import * as Configuration from "../../configuration";
import { CartesianOrientations, Events } from "../../interfaces";
// D3 Imports
import { area } from "d3-shape";
var Area = /** @class */ (function (_super) {
    __extends(Area, _super);
    function Area() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.type = "area";
        _this.handleLegendOnHover = function (event) {
            var hoveredElement = event.detail.hoveredElement;
            _this.parent
                .selectAll("path.area")
                .transition(_this.services.transitions.getTransition("legend-hover-area"))
                .attr("opacity", function (group) {
                if (group.name !== hoveredElement.datum()["name"]) {
                    return Configuration.area.opacity.unselected;
                }
                return Configuration.area.opacity.selected;
            });
        };
        _this.handleLegendMouseOut = function (event) {
            _this.parent
                .selectAll("path.area")
                .transition(_this.services.transitions.getTransition("legend-mouseout-area"))
                .attr("opacity", Configuration.area.opacity.selected);
        };
        return _this;
    }
    Area.prototype.init = function () {
        var eventsFragment = this.services.events;
        // Highlight correct area on legend item hovers
        eventsFragment.addEventListener(Events.Legend.ITEM_HOVER, this.handleLegendOnHover);
        // Un-highlight area on legend item mouseouts
        eventsFragment.addEventListener(Events.Legend.ITEM_MOUSEOUT, this.handleLegendMouseOut);
    };
    Area.prototype.render = function (animate) {
        var _this = this;
        if (animate === void 0) { animate = true; }
        var svg = this.getContainerSVG();
        var cartesianScales = this.services.cartesianScales;
        var orientation = cartesianScales.getOrientation();
        var areaGenerator = area().curve(this.services.curves.getD3Curve());
        if (orientation === CartesianOrientations.VERTICAL) {
            areaGenerator
                .x(function (d, i) { return cartesianScales.getDomainValue(d, i); })
                .y0(cartesianScales.getRangeValue(0))
                .y1(function (d, i) { return cartesianScales.getRangeValue(d, i); });
        }
        else {
            areaGenerator
                .x0(cartesianScales.getRangeValue(0))
                .x1(function (d, i) { return cartesianScales.getRangeValue(d, i); })
                .y(function (d, i) { return cartesianScales.getDomainValue(d, i); });
        }
        // Update the bound data on area groups
        var groupedData = this.model.getGroupedData();
        var areas = svg
            .selectAll("path.area")
            .data(groupedData, function (group) { return group.name; });
        // Remove elements that need to be exited
        // We need exit at the top here to make sure that
        // Data filters are processed before entering new elements
        // Or updating existing ones
        areas.exit().attr("opacity", 0).remove();
        var self = this;
        // Enter paths that need to be introduced
        var enteringAreas = areas.enter().append("path").attr("opacity", 0);
        // Apply styles and datum
        enteringAreas
            .merge(areas)
            .attr("fill", function (group) {
            return _this.model.getFillColor(group.name);
        })
            .transition(this.services.transitions.getTransition("area-update-enter", animate))
            .attr("opacity", Configuration.area.opacity.selected)
            .attr("class", "area")
            .attr("d", function (group) {
            var data = group.data;
            return areaGenerator(data);
        });
    };
    Area.prototype.destroy = function () {
        // Remove event listeners
        this.parent
            .selectAll("path.area")
            .on("mousemove", null)
            .on("mouseout", null);
        // Remove legend listeners
        var eventsFragment = this.services.events;
        eventsFragment.removeEventListener(Events.Legend.ITEM_HOVER, this.handleLegendOnHover);
        eventsFragment.removeEventListener(Events.Legend.ITEM_MOUSEOUT, this.handleLegendMouseOut);
    };
    return Area;
}(Component));
export { Area };
//# sourceMappingURL=../../../src/components/graphs/area.js.map