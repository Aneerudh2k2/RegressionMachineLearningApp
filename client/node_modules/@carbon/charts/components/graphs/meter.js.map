{"version":3,"file":"meter.js","sourceRoot":"","sources":["meter.ts"],"names":[],"mappings":"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","sourcesContent":["// Internal Imports\nimport { Component } from \"../component\";\nimport { DOMUtils } from \"../../services\";\nimport { Tools } from \"../../tools\";\n\n// D3 Imports\nimport { scaleLinear } from \"d3-scale\";\nimport { Roles } from \"../../interfaces\";\n\nexport class Meter extends Component {\n\ttype = \"meter\";\n\n\trender(animate = true) {\n\t\tconst self = this;\n\t\tconst svg = this.getContainerSVG();\n\t\tconst options = this.model.getOptions();\n\t\tconst data = this.model.getDisplayData();\n\t\tconst status = this.model.getStatus();\n\n\t\tconst { width } = DOMUtils.getSVGElementSize(this.parent, { useAttrs: true });\n\t\tconst { groupMapsTo } = options.data;\n\n\t\t// each meter has a scale for the value but no visual axis\n\t\tconst xScale = scaleLinear()\n\t\t\t.domain([0, 100])\n\t\t\t.range([0, width]);\n\n\t\t// draw the container to hold the value\n\t\tDOMUtils.appendOrSelect(svg, \"rect.container\")\n\t\t\t.attr(\"x\", 0 )\n\t\t\t.attr(\"y\", 0 )\n\t\t\t.attr(\"width\", width)\n\t\t\t.attr(\"height\", Tools.getProperty(options, \"meter\", \"height\"));\n\n\t\t// value larger than 100 will display as 100% on meter chart\n\t\tconst dataset = (data.value <= 100) ? data : data[\"value\"] = 100;\n\n\t\t// rect with the value binded\n\t\tconst value = svg.selectAll(\"rect.value\")\n\t\t\t.data([dataset]);\n\n\t\t// if user provided a color for the bar, we dont want to attach a status class\n\t\tconst userProvidedScale = Tools.getProperty(options, \"color\", \"scale\");\n\n\t\t// draw the value bar\n\t\tvalue.enter()\n\t\t\t.append(\"rect\")\n\t\t\t.classed(\"value\", true)\n\t\t\t.merge(value)\n\t\t\t.attr(\"x\", 0 )\n\t\t\t.attr(\"y\", 0 )\n\t\t\t.attr(\"height\", Tools.getProperty(options, \"meter\", \"height\"))\n\t\t\t.classed(`status--${status}`, status != null && !userProvidedScale)\n\t\t\t.transition(this.services.transitions.getTransition(\"meter-bar-update\", animate))\n\t\t\t.attr(\"width\", d => xScale(d.value))\n\t\t\t.attr(\"fill\", d => self.model.getFillColor(d[groupMapsTo]))\n\t\t\t// a11y\n\t\t\t.attr(\"role\", Roles.GRAPHICS_SYMBOL)\n\t\t\t.attr(\"aria-roledescription\", \"value\")\n\t\t\t.attr(\"aria-label\", d => d.value);\n\n\t\t// draw the peak\n\t\tconst peakValue = Tools.getProperty(options, \"meter\", \"peak\");\n\n\t\t// update the peak if it is less than the value, it should be equal to the value\n\t\tconst updatedPeak = (peakValue !== null && peakValue < dataset.value) ? dataset.value : peakValue;\n\t\t// dont display peak if there isnt one\n\t\tconst peakData = (updatedPeak === null) ? [] : [updatedPeak];\n\n\t\t// if a peak is supplied within the domain, we want to render it\n\t\tconst peak = svg.selectAll(\"line.peak\")\n\t\t\t.data(peakData);\n\n\t\tpeak.enter()\n\t\t\t.append(\"line\")\n\t\t\t.classed(\"peak\", true)\n\t\t\t.merge(peak)\n\t\t\t.attr(\"y1\", 0)\n\t\t\t.attr(\"y2\", Tools.getProperty(options, \"meter\", \"height\"))\n\t\t\t.transition(this.services.transitions.getTransition(\"peak-line-update\", animate))\n\t\t\t.attr(\"x1\", d => xScale(d))\n\t\t\t.attr(\"x2\", d => xScale(d))\n\t\t\t// a11y\n\t\t\t.attr(\"role\", Roles.GRAPHICS_SYMBOL)\n\t\t\t.attr(\"aria-roledescription\", \"peak\")\n\t\t\t.attr(\"aria-label\", d => d);\n\n\t\tpeak.exit().remove();\n\n\t\t// this forces the meter chart to only take up as much height as needed (if no height is provided)\n\t\tthis.services.domUtils.setSVGMaxHeight();\n\t}\n}\n"]}