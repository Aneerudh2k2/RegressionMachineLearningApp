var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { Tooltip } from "./tooltip";
import { AxisPositions, ScaleTypes } from "../../interfaces";
import { Tools } from "../../tools";
import { format } from "date-fns";
var AxisChartsTooltip = /** @class */ (function (_super) {
    __extends(AxisChartsTooltip, _super);
    function AxisChartsTooltip() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AxisChartsTooltip.prototype.getItems = function (e) {
        var _this = this;
        if (e.detail.items) {
            return e.detail.items;
        }
        var options = this.model.getOptions();
        var data = e.detail.data;
        var cartesianScales = this.services.cartesianScales;
        var domainAxisOptions = cartesianScales.getDomainAxisOptions();
        var domainIdentifier = cartesianScales.getDomainIdentifier();
        var domainAxisScaleType = cartesianScales.getDomainAxisScaleType();
        var rangeAxisOptions = cartesianScales.getRangeAxisOptions();
        var rangeIdentifier = cartesianScales.getRangeIdentifier();
        var rangeAxisScaleType = cartesianScales.getRangeAxisScaleType();
        // Generate default tooltip
        var groupMapsTo = options.data.groupMapsTo;
        var domainLabel = domainAxisOptions.title;
        if (!domainLabel) {
            var domainAxisPosition = cartesianScales.getDomainAxisPosition();
            if (domainAxisPosition === AxisPositions.BOTTOM ||
                domainAxisPosition === AxisPositions.TOP) {
                domainLabel = "x-value";
            }
            else {
                domainLabel = "y-value";
            }
        }
        var domainValue = data[0][domainIdentifier];
        if (domainAxisScaleType === ScaleTypes.TIME) {
            domainValue = format(new Date(data[0][domainIdentifier]), "MMM d, yyyy");
        }
        else if (domainAxisScaleType === ScaleTypes.LINEAR) {
            domainValue = domainValue.toLocaleString();
        }
        var items;
        if (data.length === 1) {
            var datum = data[0];
            var rangeLabel = rangeAxisOptions.title;
            if (!rangeLabel) {
                var rangeAxisPosition = cartesianScales.getRangeAxisPosition();
                if (rangeAxisPosition === AxisPositions.LEFT ||
                    rangeAxisPosition === AxisPositions.RIGHT) {
                    rangeLabel = "y-value";
                }
                else {
                    rangeLabel = "x-value";
                }
            }
            var rangeValue = datum[rangeIdentifier];
            if (rangeAxisScaleType === ScaleTypes.LINEAR) {
                rangeValue = rangeValue.toLocaleString();
            }
            items = [
                {
                    label: domainLabel,
                    value: domainValue
                },
                {
                    label: rangeLabel,
                    value: rangeValue
                },
                {
                    label: "Group",
                    value: datum[groupMapsTo],
                    color: this.model.getStrokeColor(datum[groupMapsTo])
                }
            ];
        }
        else if (data.length > 1) {
            items = [
                {
                    label: domainLabel,
                    value: this.valueFormatter(domainValue)
                }
            ];
            items = items.concat(data
                .map(function (datum) { return ({
                label: datum[groupMapsTo],
                value: _this.valueFormatter(datum[rangeIdentifier]),
                color: _this.model.getStrokeColor(datum[groupMapsTo])
            }); })
                .sort(function (a, b) { return b.value - a.value; }));
            if (Tools.getProperty(options, "tooltip", "showTotal") === true) {
                items.push({
                    label: "Total",
                    value: this.valueFormatter(data.reduce(function (accumulator, datum) {
                        return accumulator + datum[rangeIdentifier];
                    }, 0)),
                    bold: true
                });
            }
        }
        return items;
    };
    return AxisChartsTooltip;
}(Tooltip));
export { AxisChartsTooltip };
//# sourceMappingURL=../../../src/components/essentials/tooltip-axis.js.map