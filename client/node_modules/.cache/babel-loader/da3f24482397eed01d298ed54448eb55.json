{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}(); // Internal Imports\n\n\nimport { Component } from \"../component\";\nimport { DOMUtils } from \"../../services\";\nimport { Tools } from \"../../tools\";\n\nvar ZeroLine =\n/** @class */\nfunction (_super) {\n  __extends(ZeroLine, _super);\n\n  function ZeroLine() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.type = \"zero-line\";\n    return _this;\n  }\n\n  ZeroLine.prototype.render = function (animate) {\n    var _a = this.services.cartesianScales.getRangeScale().domain(),\n        minDomainValue = _a[0],\n        maxDomainValue = _a[1];\n\n    var drawZeroLine = minDomainValue > 0 && maxDomainValue < 0 || minDomainValue < 0 && maxDomainValue > 0; // show zero line only if is necessary\n\n    if (!drawZeroLine) {\n      return;\n    } // Grab container SVG\n\n\n    var svg = this.getContainerSVG(); // Get x & y position of the line\n\n    var _b = this.services.cartesianScales.getDomainScale().range(),\n        x0 = _b[0],\n        x1 = _b[1];\n\n    var yPosition = +this.services.cartesianScales.getRangeValue(0) + 0.5; // if scale domain contains NaN, return the first value of the range\n    // this is necessary for the zero line y position that otherwise is NaN\n    // so on the top of the chart while we want it on the bottom\n\n    if (!yPosition) {\n      var axisPosition = this.services.cartesianScales.getRangeAxisPosition();\n      var scale = this.services.cartesianScales.getScaleByPosition(axisPosition);\n      yPosition = scale.range()[0];\n    }\n\n    var lineCoordinates = Tools.flipSVGCoordinatesBasedOnOrientation({\n      x0: x0,\n      x1: x1,\n      y0: yPosition,\n      y1: yPosition\n    }, this.services.cartesianScales.getOrientation());\n    var line = DOMUtils.appendOrSelect(svg, \"line.domain\");\n    line.transition(this.services.transitions.getTransition(\"zero-line-update\", animate)).attr(\"y1\", lineCoordinates.y0).attr(\"y2\", lineCoordinates.y1).attr(\"x1\", lineCoordinates.x0).attr(\"x2\", lineCoordinates.x1);\n  };\n\n  return ZeroLine;\n}(Component);\n\nexport { ZeroLine };","map":{"version":3,"sources":["/Users/nicholasrenotte/Desktop/Regression/app/client/node_modules/@carbon/charts/components/axes/zero-line.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","Component","DOMUtils","Tools","ZeroLine","_super","_this","apply","arguments","type","render","animate","_a","services","cartesianScales","getRangeScale","domain","minDomainValue","maxDomainValue","drawZeroLine","svg","getContainerSVG","_b","getDomainScale","range","x0","x1","yPosition","getRangeValue","axisPosition","getRangeAxisPosition","scale","getScaleByPosition","lineCoordinates","flipSVGCoordinatesBasedOnOrientation","y0","y1","getOrientation","line","appendOrSelect","transition","transitions","getTransition","attr"],"mappings":"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","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n// Internal Imports\nimport { Component } from \"../component\";\nimport { DOMUtils } from \"../../services\";\nimport { Tools } from \"../../tools\";\nvar ZeroLine = /** @class */ (function (_super) {\n    __extends(ZeroLine, _super);\n    function ZeroLine() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.type = \"zero-line\";\n        return _this;\n    }\n    ZeroLine.prototype.render = function (animate) {\n        var _a = this.services.cartesianScales.getRangeScale().domain(), minDomainValue = _a[0], maxDomainValue = _a[1];\n        var drawZeroLine = (minDomainValue > 0 && maxDomainValue < 0) ||\n            (minDomainValue < 0 && maxDomainValue > 0);\n        // show zero line only if is necessary\n        if (!drawZeroLine) {\n            return;\n        }\n        // Grab container SVG\n        var svg = this.getContainerSVG();\n        // Get x & y position of the line\n        var _b = this.services.cartesianScales.getDomainScale().range(), x0 = _b[0], x1 = _b[1];\n        var yPosition = +this.services.cartesianScales.getRangeValue(0) + 0.5;\n        // if scale domain contains NaN, return the first value of the range\n        // this is necessary for the zero line y position that otherwise is NaN\n        // so on the top of the chart while we want it on the bottom\n        if (!yPosition) {\n            var axisPosition = this.services.cartesianScales.getRangeAxisPosition();\n            var scale = this.services.cartesianScales.getScaleByPosition(axisPosition);\n            yPosition = scale.range()[0];\n        }\n        var lineCoordinates = Tools.flipSVGCoordinatesBasedOnOrientation({\n            x0: x0,\n            x1: x1,\n            y0: yPosition,\n            y1: yPosition\n        }, this.services.cartesianScales.getOrientation());\n        var line = DOMUtils.appendOrSelect(svg, \"line.domain\");\n        line.transition(this.services.transitions.getTransition(\"zero-line-update\", animate))\n            .attr(\"y1\", lineCoordinates.y0)\n            .attr(\"y2\", lineCoordinates.y1)\n            .attr(\"x1\", lineCoordinates.x0)\n            .attr(\"x2\", lineCoordinates.x1);\n    };\n    return ZeroLine;\n}(Component));\nexport { ZeroLine };\n//# sourceMappingURL=../../../src/components/axes/zero-line.js.map"]},"metadata":{},"sourceType":"module"}