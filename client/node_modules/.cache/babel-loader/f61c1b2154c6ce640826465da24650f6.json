{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}(); // Internal Imports\n\n\nimport { Component } from \"../component\";\nimport { DOMUtils } from \"../../services\";\nimport { Events } from \"./../../interfaces\";\n\nvar Title =\n/** @class */\nfunction (_super) {\n  __extends(Title, _super);\n\n  function Title() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.type = \"title\";\n    return _this;\n  }\n\n  Title.prototype.render = function () {\n    var svg = this.getContainerSVG();\n    var text = svg.selectAll(\"text.title\").data([this.model.getOptions().title]);\n    text.enter().append(\"text\").classed(\"title\", true).merge(text).attr(\"x\", 0).attr(\"y\", \"1em\").html(function (d) {\n      return d;\n    }); // check the max space the title has to render\n\n    var maxWidth = this.getMaxTitleWidth();\n    var title = DOMUtils.appendOrSelect(svg, \"text.title\"); // check if title needs truncation (and tooltip support)\n\n    if (title.node().getComputedTextLength() > maxWidth && maxWidth > 0) {\n      this.truncateTitle(title, maxWidth);\n    }\n\n    text.exit().remove();\n  };\n  /**\n   * Truncates title creating ellipses and attaching tooltip for exposing full title.\n   */\n\n\n  Title.prototype.truncateTitle = function (title, maxWidth) {\n    // sanity check to prevent stack overflow on binary search\n    if (maxWidth <= 0) {\n      return;\n    }\n\n    var untruncatedTitle = title.text(); // check if the title is too big for the containing svg\n\n    if (title.node().getComputedTextLength() > maxWidth) {\n      // append the ellipses to their own tspan to calculate the text length\n      title.append(\"tspan\").text(\"...\"); // get the bounding width including the elipses '...'\n\n      var tspanLength = DOMUtils.appendOrSelect(title, \"tspan\").node().getComputedTextLength(); // with elipses\n\n      var titleString = title.text(); // get the index for creating the max length substring that fit within the svg\n      // use one less than the index to avoid crowding (the elipsis)\n\n      var substringIndex = this.getSubstringIndex(title.node(), 0, titleString.length - 1, maxWidth - tspanLength); // use the substring as the title\n\n      title.html(titleString.substring(0, substringIndex - 1)).append(\"tspan\").text(\"...\"); // add events for displaying the tooltip with the title\n\n      var self_1 = this;\n      title.on(\"mouseover\", function () {\n        self_1.services.events.dispatchEvent(Events.Tooltip.SHOW, {\n          hoveredElement: title,\n          content: untruncatedTitle\n        });\n      }).on(\"mousemove\", function () {\n        self_1.services.events.dispatchEvent(Events.Tooltip.MOVE);\n      }).on(\"mouseout\", function () {\n        self_1.services.events.dispatchEvent(Events.Tooltip.HIDE);\n      });\n    }\n  }; // computes the maximum space a title can take\n\n\n  Title.prototype.getMaxTitleWidth = function () {\n    var containerWidth = DOMUtils.getSVGElementSize(this.services.domUtils.getMainSVG(), {\n      useAttr: true\n    }).width;\n    return containerWidth;\n  };\n  /**\n   * Returns the index for a maximum length substring that is less than the width parameter.\n   * @param title the title node used for getting the text lengths of substrings\n   * @param start the start index for the binary search\n   * @param end the end index for the binary search\n   * @param width the width of the svg container that holds the title\n   */\n\n\n  Title.prototype.getSubstringIndex = function (title, start, end, width) {\n    var mid = Math.floor((end + start) / 2);\n\n    if (title.getSubStringLength(0, mid) > width) {\n      return this.getSubstringIndex(title, start, mid, width);\n    } else if (title.getSubStringLength(0, mid) < width) {\n      if (title.getSubStringLength(0, mid + 1) > width) {\n        return mid;\n      }\n\n      return this.getSubstringIndex(title, mid, end, width);\n    } else {\n      return mid;\n    }\n  };\n\n  return Title;\n}(Component);\n\nexport { Title };","map":{"version":3,"sources":["/Users/nicholasrenotte/Desktop/Regression/app/client/node_modules/@carbon/charts/components/essentials/title.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","Component","DOMUtils","Events","Title","_super","_this","apply","arguments","type","render","svg","getContainerSVG","text","selectAll","data","model","getOptions","title","enter","append","classed","merge","attr","html","maxWidth","getMaxTitleWidth","appendOrSelect","node","getComputedTextLength","truncateTitle","exit","remove","untruncatedTitle","tspanLength","titleString","substringIndex","getSubstringIndex","length","substring","self_1","on","services","events","dispatchEvent","Tooltip","SHOW","hoveredElement","content","MOVE","HIDE","containerWidth","getSVGElementSize","domUtils","getMainSVG","useAttr","width","start","end","mid","Math","floor","getSubStringLength"],"mappings":"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","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n// Internal Imports\nimport { Component } from \"../component\";\nimport { DOMUtils } from \"../../services\";\nimport { Events } from \"./../../interfaces\";\nvar Title = /** @class */ (function (_super) {\n    __extends(Title, _super);\n    function Title() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.type = \"title\";\n        return _this;\n    }\n    Title.prototype.render = function () {\n        var svg = this.getContainerSVG();\n        var text = svg.selectAll(\"text.title\")\n            .data([this.model.getOptions().title]);\n        text.enter()\n            .append(\"text\")\n            .classed(\"title\", true)\n            .merge(text)\n            .attr(\"x\", 0)\n            .attr(\"y\", \"1em\")\n            .html(function (d) { return d; });\n        // check the max space the title has to render\n        var maxWidth = this.getMaxTitleWidth();\n        var title = DOMUtils.appendOrSelect(svg, \"text.title\");\n        // check if title needs truncation (and tooltip support)\n        if (title.node().getComputedTextLength() > maxWidth && maxWidth > 0) {\n            this.truncateTitle(title, maxWidth);\n        }\n        text.exit().remove();\n    };\n    /**\n     * Truncates title creating ellipses and attaching tooltip for exposing full title.\n     */\n    Title.prototype.truncateTitle = function (title, maxWidth) {\n        // sanity check to prevent stack overflow on binary search\n        if (maxWidth <= 0) {\n            return;\n        }\n        var untruncatedTitle = title.text();\n        // check if the title is too big for the containing svg\n        if (title.node().getComputedTextLength() > maxWidth) {\n            // append the ellipses to their own tspan to calculate the text length\n            title.append(\"tspan\").text(\"...\");\n            // get the bounding width including the elipses '...'\n            var tspanLength = DOMUtils.appendOrSelect(title, \"tspan\")\n                .node()\n                .getComputedTextLength();\n            // with elipses\n            var titleString = title.text();\n            // get the index for creating the max length substring that fit within the svg\n            // use one less than the index to avoid crowding (the elipsis)\n            var substringIndex = this.getSubstringIndex(title.node(), 0, titleString.length - 1, maxWidth - tspanLength);\n            // use the substring as the title\n            title\n                .html(titleString.substring(0, substringIndex - 1))\n                .append(\"tspan\")\n                .text(\"...\");\n            // add events for displaying the tooltip with the title\n            var self_1 = this;\n            title\n                .on(\"mouseover\", function () {\n                self_1.services.events.dispatchEvent(Events.Tooltip.SHOW, {\n                    hoveredElement: title,\n                    content: untruncatedTitle\n                });\n            })\n                .on(\"mousemove\", function () {\n                self_1.services.events.dispatchEvent(Events.Tooltip.MOVE);\n            })\n                .on(\"mouseout\", function () {\n                self_1.services.events.dispatchEvent(Events.Tooltip.HIDE);\n            });\n        }\n    };\n    // computes the maximum space a title can take\n    Title.prototype.getMaxTitleWidth = function () {\n        var containerWidth = DOMUtils.getSVGElementSize(this.services.domUtils.getMainSVG(), { useAttr: true }).width;\n        return containerWidth;\n    };\n    /**\n     * Returns the index for a maximum length substring that is less than the width parameter.\n     * @param title the title node used for getting the text lengths of substrings\n     * @param start the start index for the binary search\n     * @param end the end index for the binary search\n     * @param width the width of the svg container that holds the title\n     */\n    Title.prototype.getSubstringIndex = function (title, start, end, width) {\n        var mid = Math.floor((end + start) / 2);\n        if (title.getSubStringLength(0, mid) > width) {\n            return this.getSubstringIndex(title, start, mid, width);\n        }\n        else if (title.getSubStringLength(0, mid) < width) {\n            if (title.getSubStringLength(0, mid + 1) > width) {\n                return mid;\n            }\n            return this.getSubstringIndex(title, mid, end, width);\n        }\n        else {\n            return mid;\n        }\n    };\n    return Title;\n}(Component));\nexport { Title };\n//# sourceMappingURL=../../../src/components/essentials/title.js.map"]},"metadata":{},"sourceType":"module"}