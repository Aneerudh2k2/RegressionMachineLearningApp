{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}(); // Internal Imports\n\n\nimport * as Configuration from \"./configuration\";\nimport { ChartModel } from \"./model\";\nimport { Tools } from \"./tools\";\n/** The meter chart model layer which extends some of the data setting options.\n * Meter only uses 1 dataset\n *  */\n\nvar MeterChartModel =\n/** @class */\nfunction (_super) {\n  __extends(MeterChartModel, _super);\n\n  function MeterChartModel(services) {\n    return _super.call(this, services) || this;\n  }\n\n  MeterChartModel.prototype.generateDataLabels = function (newData) {\n    var dataLabels = {};\n    dataLabels[newData.label] = Configuration.legend.items.status.ACTIVE;\n    return dataLabels;\n  };\n\n  MeterChartModel.prototype.getDisplayData = function () {\n    if (!this.get(\"data\")) {\n      return null;\n    } // meter only uses displays one data group and value\n\n\n    return this.get(\"data\")[0];\n  };\n  /**\n   * Use a provided color for the bar or default to carbon color if no status provided.\n   * Defaults to carbon color otherwise.\n   * @param group dataset group label\n   */\n\n\n  MeterChartModel.prototype.getFillColor = function (group) {\n    var options = this.getOptions();\n    var userProvidedScale = Tools.getProperty(options, \"color\", \"scale\");\n    var status = this.getStatus(); // user provided a fill color or there isn't a status we can use the colorScale\n\n    if (userProvidedScale || !status) {\n      return _super.prototype.getFillColor.call(this, group);\n    } else {\n      return null;\n    }\n  };\n  /**\n   * Get the associated status for the data by checking the ranges\n   */\n\n\n  MeterChartModel.prototype.getStatus = function () {\n    var options = this.getOptions();\n    var dataValue = this.getDisplayData().value; // user needs to supply ranges\n\n    var allRanges = Tools.getProperty(options, \"meter\", \"status\", \"ranges\");\n\n    if (allRanges) {\n      var result = allRanges.filter(function (step) {\n        return step.range[0] <= dataValue && dataValue <= step.range[1];\n      });\n\n      if (result.length > 0) {\n        return result[0].status;\n      }\n    }\n\n    return null;\n  };\n\n  return MeterChartModel;\n}(ChartModel);\n\nexport { MeterChartModel };","map":{"version":3,"sources":["/Users/nicholasrenotte/Desktop/Regression/app/client/node_modules/@carbon/charts/model-meter.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","Configuration","ChartModel","Tools","MeterChartModel","_super","services","call","generateDataLabels","newData","dataLabels","label","legend","items","status","ACTIVE","getDisplayData","get","getFillColor","group","options","getOptions","userProvidedScale","getProperty","getStatus","dataValue","value","allRanges","result","filter","step","range","length"],"mappings":"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","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n// Internal Imports\nimport * as Configuration from \"./configuration\";\nimport { ChartModel } from \"./model\";\nimport { Tools } from \"./tools\";\n/** The meter chart model layer which extends some of the data setting options.\n * Meter only uses 1 dataset\n *  */\nvar MeterChartModel = /** @class */ (function (_super) {\n    __extends(MeterChartModel, _super);\n    function MeterChartModel(services) {\n        return _super.call(this, services) || this;\n    }\n    MeterChartModel.prototype.generateDataLabels = function (newData) {\n        var dataLabels = {};\n        dataLabels[newData.label] = Configuration.legend.items.status.ACTIVE;\n        return dataLabels;\n    };\n    MeterChartModel.prototype.getDisplayData = function () {\n        if (!this.get(\"data\")) {\n            return null;\n        }\n        // meter only uses displays one data group and value\n        return this.get(\"data\")[0];\n    };\n    /**\n     * Use a provided color for the bar or default to carbon color if no status provided.\n     * Defaults to carbon color otherwise.\n     * @param group dataset group label\n     */\n    MeterChartModel.prototype.getFillColor = function (group) {\n        var options = this.getOptions();\n        var userProvidedScale = Tools.getProperty(options, \"color\", \"scale\");\n        var status = this.getStatus();\n        // user provided a fill color or there isn't a status we can use the colorScale\n        if (userProvidedScale || !status) {\n            return _super.prototype.getFillColor.call(this, group);\n        }\n        else {\n            return null;\n        }\n    };\n    /**\n     * Get the associated status for the data by checking the ranges\n     */\n    MeterChartModel.prototype.getStatus = function () {\n        var options = this.getOptions();\n        var dataValue = this.getDisplayData().value;\n        // user needs to supply ranges\n        var allRanges = Tools.getProperty(options, \"meter\", \"status\", \"ranges\");\n        if (allRanges) {\n            var result = allRanges.filter(function (step) { return (step.range[0] <= dataValue && dataValue <= step.range[1]); });\n            if (result.length > 0) {\n                return result[0].status;\n            }\n        }\n        return null;\n    };\n    return MeterChartModel;\n}(ChartModel));\nexport { MeterChartModel };\n//# sourceMappingURL=../src/model-meter.js.map"]},"metadata":{},"sourceType":"module"}