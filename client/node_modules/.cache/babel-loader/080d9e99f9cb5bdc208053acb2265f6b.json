{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}(); // Internal Imports\n\n\nimport { Component } from \"../component\";\nimport { DOMUtils } from \"../../services\";\nimport { Tools } from \"../../tools\"; // D3 Imports\n\nimport { scaleLinear } from \"d3-scale\";\nimport { Roles } from \"../../interfaces\";\n\nvar Meter =\n/** @class */\nfunction (_super) {\n  __extends(Meter, _super);\n\n  function Meter() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.type = \"meter\";\n    return _this;\n  }\n\n  Meter.prototype.render = function (animate) {\n    if (animate === void 0) {\n      animate = true;\n    }\n\n    var self = this;\n    var svg = this.getContainerSVG();\n    var options = this.model.getOptions();\n    var data = this.model.getDisplayData();\n    var status = this.model.getStatus();\n    var width = DOMUtils.getSVGElementSize(this.parent, {\n      useAttrs: true\n    }).width;\n    var groupMapsTo = options.data.groupMapsTo; // each meter has a scale for the value but no visual axis\n\n    var xScale = scaleLinear().domain([0, 100]).range([0, width]); // draw the container to hold the value\n\n    DOMUtils.appendOrSelect(svg, \"rect.container\").attr(\"x\", 0).attr(\"y\", 0).attr(\"width\", width).attr(\"height\", Tools.getProperty(options, \"meter\", \"height\")); // value larger than 100 will display as 100% on meter chart\n\n    var dataset = data.value <= 100 ? data : data[\"value\"] = 100; // rect with the value binded\n\n    var value = svg.selectAll(\"rect.value\").data([dataset]); // if user provided a color for the bar, we dont want to attach a status class\n\n    var userProvidedScale = Tools.getProperty(options, \"color\", \"scale\"); // draw the value bar\n\n    value.enter().append(\"rect\").classed(\"value\", true).merge(value).attr(\"x\", 0).attr(\"y\", 0).attr(\"height\", Tools.getProperty(options, \"meter\", \"height\")).classed(\"status--\" + status, status != null && !userProvidedScale).transition(this.services.transitions.getTransition(\"meter-bar-update\", animate)).attr(\"width\", function (d) {\n      return xScale(d.value);\n    }).attr(\"fill\", function (d) {\n      return self.model.getFillColor(d[groupMapsTo]);\n    }) // a11y\n    .attr(\"role\", Roles.GRAPHICS_SYMBOL).attr(\"aria-roledescription\", \"value\").attr(\"aria-label\", function (d) {\n      return d.value;\n    }); // draw the peak\n\n    var peakValue = Tools.getProperty(options, \"meter\", \"peak\"); // update the peak if it is less than the value, it should be equal to the value\n\n    var updatedPeak = peakValue !== null && peakValue < dataset.value ? dataset.value : peakValue; // dont display peak if there isnt one\n\n    var peakData = updatedPeak === null ? [] : [updatedPeak]; // if a peak is supplied within the domain, we want to render it\n\n    var peak = svg.selectAll(\"line.peak\").data(peakData);\n    peak.enter().append(\"line\").classed(\"peak\", true).merge(peak).attr(\"y1\", 0).attr(\"y2\", Tools.getProperty(options, \"meter\", \"height\")).transition(this.services.transitions.getTransition(\"peak-line-update\", animate)).attr(\"x1\", function (d) {\n      return xScale(d);\n    }).attr(\"x2\", function (d) {\n      return xScale(d);\n    }) // a11y\n    .attr(\"role\", Roles.GRAPHICS_SYMBOL).attr(\"aria-roledescription\", \"peak\").attr(\"aria-label\", function (d) {\n      return d;\n    });\n    peak.exit().remove(); // this forces the meter chart to only take up as much height as needed (if no height is provided)\n\n    this.services.domUtils.setSVGMaxHeight();\n  };\n\n  return Meter;\n}(Component);\n\nexport { Meter };","map":{"version":3,"sources":["/Users/nicholasrenotte/Desktop/Regression/app/client/node_modules/@carbon/charts/components/graphs/meter.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","Component","DOMUtils","Tools","scaleLinear","Roles","Meter","_super","_this","apply","arguments","type","render","animate","self","svg","getContainerSVG","options","model","getOptions","data","getDisplayData","status","getStatus","width","getSVGElementSize","parent","useAttrs","groupMapsTo","xScale","domain","range","appendOrSelect","attr","getProperty","dataset","value","selectAll","userProvidedScale","enter","append","classed","merge","transition","services","transitions","getTransition","getFillColor","GRAPHICS_SYMBOL","peakValue","updatedPeak","peakData","peak","exit","remove","domUtils","setSVGMaxHeight"],"mappings":"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","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n// Internal Imports\nimport { Component } from \"../component\";\nimport { DOMUtils } from \"../../services\";\nimport { Tools } from \"../../tools\";\n// D3 Imports\nimport { scaleLinear } from \"d3-scale\";\nimport { Roles } from \"../../interfaces\";\nvar Meter = /** @class */ (function (_super) {\n    __extends(Meter, _super);\n    function Meter() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.type = \"meter\";\n        return _this;\n    }\n    Meter.prototype.render = function (animate) {\n        if (animate === void 0) { animate = true; }\n        var self = this;\n        var svg = this.getContainerSVG();\n        var options = this.model.getOptions();\n        var data = this.model.getDisplayData();\n        var status = this.model.getStatus();\n        var width = DOMUtils.getSVGElementSize(this.parent, { useAttrs: true }).width;\n        var groupMapsTo = options.data.groupMapsTo;\n        // each meter has a scale for the value but no visual axis\n        var xScale = scaleLinear()\n            .domain([0, 100])\n            .range([0, width]);\n        // draw the container to hold the value\n        DOMUtils.appendOrSelect(svg, \"rect.container\")\n            .attr(\"x\", 0)\n            .attr(\"y\", 0)\n            .attr(\"width\", width)\n            .attr(\"height\", Tools.getProperty(options, \"meter\", \"height\"));\n        // value larger than 100 will display as 100% on meter chart\n        var dataset = (data.value <= 100) ? data : data[\"value\"] = 100;\n        // rect with the value binded\n        var value = svg.selectAll(\"rect.value\")\n            .data([dataset]);\n        // if user provided a color for the bar, we dont want to attach a status class\n        var userProvidedScale = Tools.getProperty(options, \"color\", \"scale\");\n        // draw the value bar\n        value.enter()\n            .append(\"rect\")\n            .classed(\"value\", true)\n            .merge(value)\n            .attr(\"x\", 0)\n            .attr(\"y\", 0)\n            .attr(\"height\", Tools.getProperty(options, \"meter\", \"height\"))\n            .classed(\"status--\" + status, status != null && !userProvidedScale)\n            .transition(this.services.transitions.getTransition(\"meter-bar-update\", animate))\n            .attr(\"width\", function (d) { return xScale(d.value); })\n            .attr(\"fill\", function (d) { return self.model.getFillColor(d[groupMapsTo]); })\n            // a11y\n            .attr(\"role\", Roles.GRAPHICS_SYMBOL)\n            .attr(\"aria-roledescription\", \"value\")\n            .attr(\"aria-label\", function (d) { return d.value; });\n        // draw the peak\n        var peakValue = Tools.getProperty(options, \"meter\", \"peak\");\n        // update the peak if it is less than the value, it should be equal to the value\n        var updatedPeak = (peakValue !== null && peakValue < dataset.value) ? dataset.value : peakValue;\n        // dont display peak if there isnt one\n        var peakData = (updatedPeak === null) ? [] : [updatedPeak];\n        // if a peak is supplied within the domain, we want to render it\n        var peak = svg.selectAll(\"line.peak\")\n            .data(peakData);\n        peak.enter()\n            .append(\"line\")\n            .classed(\"peak\", true)\n            .merge(peak)\n            .attr(\"y1\", 0)\n            .attr(\"y2\", Tools.getProperty(options, \"meter\", \"height\"))\n            .transition(this.services.transitions.getTransition(\"peak-line-update\", animate))\n            .attr(\"x1\", function (d) { return xScale(d); })\n            .attr(\"x2\", function (d) { return xScale(d); })\n            // a11y\n            .attr(\"role\", Roles.GRAPHICS_SYMBOL)\n            .attr(\"aria-roledescription\", \"peak\")\n            .attr(\"aria-label\", function (d) { return d; });\n        peak.exit().remove();\n        // this forces the meter chart to only take up as much height as needed (if no height is provided)\n        this.services.domUtils.setSVGMaxHeight();\n    };\n    return Meter;\n}(Component));\nexport { Meter };\n//# sourceMappingURL=../../../src/components/graphs/meter.js.map"]},"metadata":{},"sourceType":"module"}