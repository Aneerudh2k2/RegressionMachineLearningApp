{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}(); // Internal Imports\n\n\nimport { Service } from \"../service\";\nimport { Events, Alignments } from \"./../../interfaces\"; // D3 Imports\n\nimport { select } from \"d3-selection\";\nimport { Tools } from \"../../tools\"; // import the settings for the css prefix\n\nimport settings from \"carbon-components/es/globals/js/settings\"; // MISC\n\nimport ResizeObserver from \"resize-observer-polyfill\";\n\nvar DOMUtils =\n/** @class */\nfunction (_super) {\n  __extends(DOMUtils, _super);\n\n  function DOMUtils() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  DOMUtils.getSVGElementSize = function (svgSelector, options) {\n    if (!svgSelector.attr) {\n      svgSelector = select(svgSelector);\n    }\n\n    var finalDimensions = {\n      width: 0,\n      height: 0\n    };\n\n    var validateAndSetDimensions = function (dimensions) {\n      if (dimensions) {\n        Object.keys(finalDimensions).forEach(function (dimensionKey) {\n          if (dimensions[dimensionKey]) {\n            var dimension = dimensions[dimensionKey];\n            var dimensionNumber = parseFloat(dimension);\n\n            if (dimension && dimensionNumber > finalDimensions[dimensionKey] && (\"\" + dimension).indexOf(\"%\") === -1) {\n              finalDimensions[dimensionKey] = dimensionNumber;\n            }\n          }\n        });\n      }\n    };\n\n    var attrDimensions = {\n      width: svgSelector.attr(\"width\"),\n      height: svgSelector.attr(\"height\")\n    };\n    var bbox, bboxDimensions, boundingRect, boundingRectDimensions; // In many versions of Firefox\n    // getBBox will cause an \"NSFailure\" error\n\n    try {\n      bbox = svgSelector.node().getBBox();\n      bboxDimensions = {\n        width: bbox.width,\n        height: bbox.height\n      };\n    } catch (e) {}\n\n    try {\n      boundingRect = svgSelector.node().getBoundingClientRect();\n      boundingRectDimensions = {\n        width: boundingRect.width,\n        height: boundingRect.height\n      };\n    } catch (e) {}\n\n    var clientDimensions = {\n      width: svgSelector.node().clientWidth,\n      height: svgSelector.node().clientHeight\n    }; // If both attribute values are numbers\n    // And not percentages or NaN\n\n    if (options) {\n      if (options.useAttrs) {\n        validateAndSetDimensions(attrDimensions);\n\n        if (finalDimensions.width > 0 && finalDimensions.height > 0) {\n          return finalDimensions;\n        }\n      }\n\n      if (options.useClientDimensions) {\n        validateAndSetDimensions(clientDimensions);\n\n        if (finalDimensions.width > 0 && finalDimensions.height > 0) {\n          return clientDimensions;\n        }\n      }\n\n      if (options.useBBox) {\n        validateAndSetDimensions(bboxDimensions);\n\n        if (finalDimensions.width > 0 && finalDimensions.height > 0) {\n          return bboxDimensions;\n        }\n      }\n\n      if (options.useBoundingRect) {\n        validateAndSetDimensions(boundingRectDimensions);\n\n        if (finalDimensions.width > 0 && finalDimensions.height > 0) {\n          return boundingRectDimensions;\n        }\n      }\n    }\n\n    try {\n      var nativeDimensions = {\n        width: Tools.getProperty(svgSelector.node(), \"width\", \"baseVal\", \"value\"),\n        height: Tools.getProperty(svgSelector.node(), \"height\", \"baseVal\", \"value\")\n      };\n      validateAndSetDimensions(nativeDimensions);\n    } catch (e) {\n      validateAndSetDimensions(clientDimensions);\n      validateAndSetDimensions(bboxDimensions);\n      validateAndSetDimensions(attrDimensions);\n    }\n\n    return finalDimensions;\n  };\n\n  DOMUtils.appendOrSelect = function (parent, query) {\n    var querySections = query.split(\".\");\n    var elementToAppend = querySections[0];\n    var selection = parent.select(query);\n\n    if (selection.empty()) {\n      return parent.append(elementToAppend).attr(\"class\", querySections.slice(1).join(\" \"));\n    }\n\n    return selection;\n  };\n\n  DOMUtils.getAlignmentOffset = function (alignment, svg, parent) {\n    var svgDimensions = DOMUtils.getSVGElementSize(svg, {\n      useBBox: true\n    });\n    var width = DOMUtils.getSVGElementSize(parent, {\n      useAttr: true\n    }).width;\n    var alignmentOffset = 0;\n\n    if (alignment === Alignments.CENTER) {\n      alignmentOffset = Math.floor((width - svgDimensions.width) / 2);\n    } else if (alignment === Alignments.RIGHT) {\n      alignmentOffset = width - svgDimensions.width;\n    }\n\n    return alignmentOffset;\n  };\n\n  DOMUtils.prototype.init = function () {\n    // Add width & height to the chart holder if necessary, and add a classname\n    this.styleHolderElement(); // Add main SVG\n\n    this.addSVGElement();\n\n    if (this.model.getOptions().resizable) {\n      this.addResizeListener();\n    }\n\n    this.addHolderListeners();\n  };\n\n  DOMUtils.prototype.update = function () {\n    this.styleHolderElement();\n  };\n\n  DOMUtils.prototype.styleHolderElement = function () {\n    var holderElement = this.getHolder(); // Add class to chart holder\n\n    select(this.getHolder()).classed(settings.prefix + \"--chart-holder\", true); // In order for resize events to not clash with these updates\n    // We'll check if the width & height values passed in options\n    // Have changed, before setting them to the holder\n\n    var _a = this.model.getOptions(),\n        width = _a.width,\n        height = _a.height;\n\n    if (width !== this.width) {\n      // Apply formatted width attribute to chart\n      holderElement.style.width = width;\n      this.width = width;\n    }\n\n    if (height !== this.height) {\n      // Apply formatted width attribute to chart\n      holderElement.style.height = height;\n      this.height = height;\n    }\n  };\n\n  DOMUtils.prototype.getHolder = function () {\n    return this.model.get(\"holder\");\n  };\n\n  DOMUtils.prototype.addSVGElement = function () {\n    var options = this.model.getOptions();\n    var chartsprefix = Tools.getProperty(options, \"style\", \"prefix\");\n    var svg = select(this.getHolder()).append(\"svg\").classed(settings.prefix + \"--\" + chartsprefix + \"--chart-svg\", true).attr(\"height\", \"100%\").attr(\"width\", \"100%\");\n    this.svg = svg.node();\n  };\n\n  DOMUtils.prototype.setSVGMaxHeight = function () {\n    // if there is a set height on the holder, leave the chart svg height at 100%\n    if (!this.model.getOptions().height) {\n      var chartHeight = DOMUtils.getSVGElementSize(select(this.svg), {\n        useBBox: true\n      }).height;\n      var chartSVGSelector = select(this.svg).attr(\"class\");\n      var children = select(this.svg).selectAll(\".\" + chartSVGSelector + \" > svg\"); // get the height of the children SVGs (spacers, titles, etc)\n\n      var childrenHeight_1 = 0;\n      children.nodes().forEach(function (childSVG) {\n        childrenHeight_1 += Number(DOMUtils.getSVGElementSize(select(childSVG), {\n          useBBox: true\n        }).height);\n      }); // set the chart svg height to the children height\n      // forcing the chart not to take up any more space than it requires\n\n      childrenHeight_1 <= chartHeight ? select(this.svg).attr(\"height\", childrenHeight_1) : select(this.svg).attr(\"height\", \"100%\");\n    }\n  };\n\n  DOMUtils.prototype.getMainSVG = function () {\n    return this.svg;\n  };\n\n  DOMUtils.prototype.addHolderListeners = function () {\n    var _this = this;\n\n    var holder = this.getHolder();\n\n    if (!holder) {\n      return;\n    }\n\n    select(holder).on(\"mouseover\", function () {\n      // Dispatch event\n      _this.services.events.dispatchEvent(Events.Chart.MOUSEOVER);\n    }).on(\"mouseout\", function () {\n      // Dispatch event\n      _this.services.events.dispatchEvent(Events.Chart.MOUSEOUT);\n    });\n  };\n\n  DOMUtils.prototype.addResizeListener = function () {\n    var _this = this;\n\n    var holder = this.getHolder();\n\n    if (!holder) {\n      return;\n    } // Grab current dimensions of the chart holder\n\n\n    var containerWidth = holder.clientWidth;\n    var containerHeight = holder.clientHeight; // The resize callback function\n\n    var resizeCallback = Tools.debounce(function (entries, observer) {\n      if (!holder) {\n        return;\n      }\n\n      if (Math.abs(containerWidth - holder.clientWidth) > 1 || Math.abs(containerHeight - holder.clientHeight) > 1) {\n        containerWidth = holder.clientWidth;\n        containerHeight = holder.clientHeight;\n\n        _this.services.events.dispatchEvent(Events.Chart.RESIZE);\n      }\n    }, 12.5); // Observe the behaviour of resizing on the holder\n\n    var resizeObserver = new ResizeObserver(resizeCallback);\n    resizeObserver.observe(holder);\n  };\n\n  return DOMUtils;\n}(Service);\n\nexport { DOMUtils };","map":{"version":3,"sources":["/Users/nicholasrenotte/Desktop/Regression/app/client/node_modules/@carbon/charts/services/essentials/dom-utils.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","Service","Events","Alignments","select","Tools","settings","ResizeObserver","DOMUtils","_super","apply","arguments","getSVGElementSize","svgSelector","options","attr","finalDimensions","width","height","validateAndSetDimensions","dimensions","keys","forEach","dimensionKey","dimension","dimensionNumber","parseFloat","indexOf","attrDimensions","bbox","bboxDimensions","boundingRect","boundingRectDimensions","node","getBBox","e","getBoundingClientRect","clientDimensions","clientWidth","clientHeight","useAttrs","useClientDimensions","useBBox","useBoundingRect","nativeDimensions","getProperty","appendOrSelect","parent","query","querySections","split","elementToAppend","selection","empty","append","slice","join","getAlignmentOffset","alignment","svg","svgDimensions","useAttr","alignmentOffset","CENTER","Math","floor","RIGHT","init","styleHolderElement","addSVGElement","model","getOptions","resizable","addResizeListener","addHolderListeners","update","holderElement","getHolder","classed","prefix","_a","style","get","chartsprefix","setSVGMaxHeight","chartHeight","chartSVGSelector","children","selectAll","childrenHeight_1","nodes","childSVG","Number","getMainSVG","_this","holder","on","services","events","dispatchEvent","Chart","MOUSEOVER","MOUSEOUT","containerWidth","containerHeight","resizeCallback","debounce","entries","observer","abs","RESIZE","resizeObserver","observe"],"mappings":"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","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n// Internal Imports\nimport { Service } from \"../service\";\nimport { Events, Alignments } from \"./../../interfaces\";\n// D3 Imports\nimport { select } from \"d3-selection\";\nimport { Tools } from \"../../tools\";\n// import the settings for the css prefix\nimport settings from \"carbon-components/es/globals/js/settings\";\n// MISC\nimport ResizeObserver from \"resize-observer-polyfill\";\nvar DOMUtils = /** @class */ (function (_super) {\n    __extends(DOMUtils, _super);\n    function DOMUtils() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    DOMUtils.getSVGElementSize = function (svgSelector, options) {\n        if (!svgSelector.attr) {\n            svgSelector = select(svgSelector);\n        }\n        var finalDimensions = {\n            width: 0,\n            height: 0\n        };\n        var validateAndSetDimensions = function (dimensions) {\n            if (dimensions) {\n                Object.keys(finalDimensions).forEach(function (dimensionKey) {\n                    if (dimensions[dimensionKey]) {\n                        var dimension = dimensions[dimensionKey];\n                        var dimensionNumber = parseFloat(dimension);\n                        if (dimension &&\n                            dimensionNumber > finalDimensions[dimensionKey] &&\n                            (\"\" + dimension).indexOf(\"%\") === -1) {\n                            finalDimensions[dimensionKey] = dimensionNumber;\n                        }\n                    }\n                });\n            }\n        };\n        var attrDimensions = {\n            width: svgSelector.attr(\"width\"),\n            height: svgSelector.attr(\"height\")\n        };\n        var bbox, bboxDimensions, boundingRect, boundingRectDimensions;\n        // In many versions of Firefox\n        // getBBox will cause an \"NSFailure\" error\n        try {\n            bbox = svgSelector.node().getBBox();\n            bboxDimensions = {\n                width: bbox.width,\n                height: bbox.height\n            };\n        }\n        catch (e) { }\n        try {\n            boundingRect = svgSelector.node().getBoundingClientRect();\n            boundingRectDimensions = {\n                width: boundingRect.width,\n                height: boundingRect.height\n            };\n        }\n        catch (e) { }\n        var clientDimensions = {\n            width: svgSelector.node().clientWidth,\n            height: svgSelector.node().clientHeight\n        };\n        // If both attribute values are numbers\n        // And not percentages or NaN\n        if (options) {\n            if (options.useAttrs) {\n                validateAndSetDimensions(attrDimensions);\n                if (finalDimensions.width > 0 && finalDimensions.height > 0) {\n                    return finalDimensions;\n                }\n            }\n            if (options.useClientDimensions) {\n                validateAndSetDimensions(clientDimensions);\n                if (finalDimensions.width > 0 && finalDimensions.height > 0) {\n                    return clientDimensions;\n                }\n            }\n            if (options.useBBox) {\n                validateAndSetDimensions(bboxDimensions);\n                if (finalDimensions.width > 0 && finalDimensions.height > 0) {\n                    return bboxDimensions;\n                }\n            }\n            if (options.useBoundingRect) {\n                validateAndSetDimensions(boundingRectDimensions);\n                if (finalDimensions.width > 0 && finalDimensions.height > 0) {\n                    return boundingRectDimensions;\n                }\n            }\n        }\n        try {\n            var nativeDimensions = {\n                width: Tools.getProperty(svgSelector.node(), \"width\", \"baseVal\", \"value\"),\n                height: Tools.getProperty(svgSelector.node(), \"height\", \"baseVal\", \"value\")\n            };\n            validateAndSetDimensions(nativeDimensions);\n        }\n        catch (e) {\n            validateAndSetDimensions(clientDimensions);\n            validateAndSetDimensions(bboxDimensions);\n            validateAndSetDimensions(attrDimensions);\n        }\n        return finalDimensions;\n    };\n    DOMUtils.appendOrSelect = function (parent, query) {\n        var querySections = query.split(\".\");\n        var elementToAppend = querySections[0];\n        var selection = parent.select(query);\n        if (selection.empty()) {\n            return parent\n                .append(elementToAppend)\n                .attr(\"class\", querySections.slice(1).join(\" \"));\n        }\n        return selection;\n    };\n    DOMUtils.getAlignmentOffset = function (alignment, svg, parent) {\n        var svgDimensions = DOMUtils.getSVGElementSize(svg, { useBBox: true });\n        var width = DOMUtils.getSVGElementSize(parent, { useAttr: true }).width;\n        var alignmentOffset = 0;\n        if (alignment === Alignments.CENTER) {\n            alignmentOffset = Math.floor((width - svgDimensions.width) / 2);\n        }\n        else if (alignment === Alignments.RIGHT) {\n            alignmentOffset = width - svgDimensions.width;\n        }\n        return alignmentOffset;\n    };\n    DOMUtils.prototype.init = function () {\n        // Add width & height to the chart holder if necessary, and add a classname\n        this.styleHolderElement();\n        // Add main SVG\n        this.addSVGElement();\n        if (this.model.getOptions().resizable) {\n            this.addResizeListener();\n        }\n        this.addHolderListeners();\n    };\n    DOMUtils.prototype.update = function () {\n        this.styleHolderElement();\n    };\n    DOMUtils.prototype.styleHolderElement = function () {\n        var holderElement = this.getHolder();\n        // Add class to chart holder\n        select(this.getHolder()).classed(settings.prefix + \"--chart-holder\", true);\n        // In order for resize events to not clash with these updates\n        // We'll check if the width & height values passed in options\n        // Have changed, before setting them to the holder\n        var _a = this.model.getOptions(), width = _a.width, height = _a.height;\n        if (width !== this.width) {\n            // Apply formatted width attribute to chart\n            holderElement.style.width = width;\n            this.width = width;\n        }\n        if (height !== this.height) {\n            // Apply formatted width attribute to chart\n            holderElement.style.height = height;\n            this.height = height;\n        }\n    };\n    DOMUtils.prototype.getHolder = function () {\n        return this.model.get(\"holder\");\n    };\n    DOMUtils.prototype.addSVGElement = function () {\n        var options = this.model.getOptions();\n        var chartsprefix = Tools.getProperty(options, \"style\", \"prefix\");\n        var svg = select(this.getHolder())\n            .append(\"svg\")\n            .classed(settings.prefix + \"--\" + chartsprefix + \"--chart-svg\", true)\n            .attr(\"height\", \"100%\")\n            .attr(\"width\", \"100%\");\n        this.svg = svg.node();\n    };\n    DOMUtils.prototype.setSVGMaxHeight = function () {\n        // if there is a set height on the holder, leave the chart svg height at 100%\n        if (!this.model.getOptions().height) {\n            var chartHeight = DOMUtils.getSVGElementSize(select(this.svg), { useBBox: true }).height;\n            var chartSVGSelector = select(this.svg).attr(\"class\");\n            var children = select(this.svg).selectAll(\".\" + chartSVGSelector + \" > svg\");\n            // get the height of the children SVGs (spacers, titles, etc)\n            var childrenHeight_1 = 0;\n            children.nodes().forEach(function (childSVG) {\n                childrenHeight_1 += Number(DOMUtils.getSVGElementSize(select(childSVG), { useBBox: true }).height);\n            });\n            // set the chart svg height to the children height\n            // forcing the chart not to take up any more space than it requires\n            childrenHeight_1 <= chartHeight ? select(this.svg).attr(\"height\", childrenHeight_1) : select(this.svg).attr(\"height\", \"100%\");\n        }\n    };\n    DOMUtils.prototype.getMainSVG = function () {\n        return this.svg;\n    };\n    DOMUtils.prototype.addHolderListeners = function () {\n        var _this = this;\n        var holder = this.getHolder();\n        if (!holder) {\n            return;\n        }\n        select(holder)\n            .on(\"mouseover\", function () {\n            // Dispatch event\n            _this.services.events.dispatchEvent(Events.Chart.MOUSEOVER);\n        })\n            .on(\"mouseout\", function () {\n            // Dispatch event\n            _this.services.events.dispatchEvent(Events.Chart.MOUSEOUT);\n        });\n    };\n    DOMUtils.prototype.addResizeListener = function () {\n        var _this = this;\n        var holder = this.getHolder();\n        if (!holder) {\n            return;\n        }\n        // Grab current dimensions of the chart holder\n        var containerWidth = holder.clientWidth;\n        var containerHeight = holder.clientHeight;\n        // The resize callback function\n        var resizeCallback = Tools.debounce(function (entries, observer) {\n            if (!holder) {\n                return;\n            }\n            if (Math.abs(containerWidth - holder.clientWidth) > 1 ||\n                Math.abs(containerHeight - holder.clientHeight) > 1) {\n                containerWidth = holder.clientWidth;\n                containerHeight = holder.clientHeight;\n                _this.services.events.dispatchEvent(Events.Chart.RESIZE);\n            }\n        }, 12.5);\n        // Observe the behaviour of resizing on the holder\n        var resizeObserver = new ResizeObserver(resizeCallback);\n        resizeObserver.observe(holder);\n    };\n    return DOMUtils;\n}(Service));\nexport { DOMUtils };\n//# sourceMappingURL=../../../src/services/essentials/dom-utils.js.map"]},"metadata":{},"sourceType":"module"}